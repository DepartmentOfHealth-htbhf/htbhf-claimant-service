buildscript {
    apply from: "external-dependencies.gradle"
    apply from: "default-properties.gradle"

    dependencies {
        classpath springBootGradlePlugin, gradleVersionsPlugin, dependencyManagementPlugin
    }
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'org.shipkit.java' version '2.0.31'
}
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

group = 'uk.gov.dhsc.htbhf'

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply from: "${rootProject.projectDir}/external-dependencies.gradle"

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = "0.8.2"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    test {
        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

task jacocoReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

def testCounter = 0
allprojects {
    tasks.withType(Test) {
        afterSuite { testDescriptor, testResult ->
            testCounter += testResult.testCount
        }
    }
}


